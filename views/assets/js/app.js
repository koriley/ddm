'use strict'; // remove line below when testing frontend

var fs = require('fs');

var rimraf = require("rimraf"); // Paths


var campaignListPath = "./campaign.json";
var bookPath = "./books/";
var campaignDirPath = "./campaigns/";
var thisCampaignPath; ///
//glodal objects

var books = {};
var npc = {};
var campaignObj = {};
var thisCampaign = {}; ///
//global vars

var spaceChar = "__"; ///
//temp to cose the campaign picker.

jQuery(".closeCampWindow").on("click", function () {
  jQuery(".campaigns").remove();
});
jQuery("document").ready(function () {
  jQuery(".drag").draggable({
    containment: ".mainView",
    scroll: false
  });
});

Object.prototype.hasOwnProperty = function (property) {
  return this[property] !== undefined;
};
"use strict";

jQuery(document).ready(function () {
  startApp().then(function (data) {
    setCampaigns(data).then(function (campList) {
      jQuery(".campaignList").prepend(campList);
    }); // console.log(JSON.stringify(data));
    // console.log(campaignObj)
  });
});

function startApp() {
  return new Promise(function (resolve, reject) {
    try {
      getCampaigns(campaignListPath).then(function (data) {
        resolve(data);
      });
    } catch (error) {
      reject(error);
    }
  });
}
'use strict';

function readAFile(filepath) {
  return new Promise(function (resolve, reject) {
    fs.readFile(filepath, 'utf-8', function (err, data) {
      if (err) {
        reject("An error ocurred reading the file :" + err.message);
        return;
      } else {
        resolve(data);
      }
    });
  });
}

function writeFile(filepath, data) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(filepath, data, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve("File Written");
      }
    });
  });
}

function getDirContents(dir) {
  return new Promise(function (resolve, reject) {
    var files = {};
    var fileNames = [];

    try {
      fs.readdirSync(dir).forEach(function (fileName) {
        fileNames.push({
          "name": fileName
        });
        files = {
          "files": fileNames
        };
      });
      resolve(files);
    } catch (error) {
      reject(error);
    }
  });
}

function checkFileExist(path) {
  return new Promise(function (resolve, reject) {
    if (!path) {
      reject("Path is invalid " + path);
    }

    try {
      fs.access(path, fs.F_OK, function (err) {
        if (err) {
          resolve("false");
        }

        resolve("true");
      });
    } catch (error) {
      reject("error");
    }
  });
}

function checkDirExist(dir) {
  return new Promise(function (resolve, reject) {
    try {
      if (fs.existsSync(dir)) {
        resolve("true");
      } else {
        resolve("false");
      }
    } catch (error) {
      reject(error);
    }
  });
}

function createDir(dir) {
  return new Promise(function (resolve, reject) {
    try {
      fs.mkdirSync(dir);
      resolve("done");
    } catch (error) {
      reject(error);
    }
  });
}

function removeSpace(string) {
  return new Promise(function (resolve, reject) {
    try {
      var cleanString = string.replace(/\s/g, spaceChar);
      resolve(cleanString);
    } catch (error) {
      reject(error);
    }
  });
}

function addSpace(string) {
  return new Promise(function (resolve, reject) {
    try {
      var addSpace = new RegExp(spaceChar, "g");
      var cleanString = string.replace(addSpace, /\s/);
      resolve(cleanString);
    } catch (error) {
      reject(error);
    }
  });
} //write test
// var testObj  = "This is a write test";
// writeFile("../test.txt", testObj);
"use strict";

function updateAbilityBonus(myAbility) {
  var ability = jQuery(myAbility).val();
  var modifier = jQuery(myAbility).parent().children('.modifier-bubble').text();

  if (!jQuery.isNumeric(ability)) {
    ability = 1;
    jQuery(myAbility).val(ability);
  }

  modifier = Math.floor((ability - 10) / 2);
  jQuery(myAbility).parent().children('.modifier-bubble').text(modifier);
}

;
jQuery(".ability").each(function () {
  updateAbilityBonus(jQuery(this));
  jQuery(this).on("focus", function () {
    jQuery(this).select();
  });
  jQuery(this).on("keyup", function () {
    updateAbilityBonus(jQuery(this));
    updateProf(jQuery('.savingThrows #' + jQuery(this).attr('id')));
  });
});
"use strict";

function clearTop() {
  jQuery(".drag").each(function () {
    jQuery(this).removeClass("onTop");
  });
}

;
jQuery(".drag").on("mousedown", function () {
  clearTop();
  jQuery(this).addClass("onTop");
});
"use strict";

// getDirContents("./books").then(function (files) {
//   // console.log();
//   // console.log(JSON.parse(JSON.stringify(files.files[0].name)));
//   for(var i = 0; i <= files.files.length - 1; i++) {
//     readAFile("./books/" + JSON.parse(JSON.stringify(files.files[i].name))).then(function (book) {
//       var bookTitle = JSON.parse(book);
//       console.log(bookTitle.details.name);
//       jQuery(".bookList").append(`<div class="book">${bookTitle.details.name}<div>`);
//        //look for npc, this will eventually be its own function
//       if(bookTitle.hasOwnProperty("NPC")){
//         console.log(bookTitle.details.name+" true")
//       }else{
//         console.log("none found")
//       }
//     });
//   }
// });
listBooks().then(function (data) {
  console.log(data);
});

function listBooks() {
  return new Promise(function (resolve, reject) {
    var titleArray = [];

    try {
      getDirContents(bookPath).then(function (data) {
        // console.log(JSON.stringify(data))
        for (var i = 0; i <= data.files.length - 1; i++) {
          var path = bookPath + JSON.parse(JSON.stringify(data.files[i].name));
          readAFile(path).then(function (book) {
            var bookTitle = JSON.parse(book);
            var bookObj = {
              "name": bookTitle.details.name,
              "path": path
            };
            titleArray.push(JSON.stringify(bookObj)); // console.log(JSON.stringify(bookTitle.details.name))
          });
        } // console.log(titleArray)


        books = {
          "books": titleArray
        };
        resolve(books);
      });
    } catch (error) {
      reject(error);
    }
  });
}
"use strict";

/**
 * Need to build loading a campaign
 * need new campaign to make sure its name is unique.
 */
jQuery(".campAdd").on("click", function () {
  newCampaign();
});
jQuery(".campaignList").on("click", ".campLoad", function () {
  var toLoad = jQuery(this).attr("data-load");
  var thisName = jQuery(this).attr("data-name");
  var thisDir; //   console.log(toLoadName)

  removeSpace(thisName).then(function (name) {
    thisDir = campaignDirPath + name + "/camp.json";
    checkFileExist(thisDir).then(function (data) {
      if (data == "false") {
        alert("This campaign doesn't exist... Now deleting");
        deleteCampaign(thisName, toLoad);
      } else {
        readAFile(thisDir).then(function (data) {
          thisCampaign == JSON.parse(JSON.stringify(data)); //Will need to load up all the books and stuff, 
          //but we need to figure out the obj
          // so for now we will just go to the ui

          jQuery(".campaigns").remove();
        });
      }
    });
  });
}); //the delete button

jQuery(".campaignList").on("click", ".campDelete", function () {
  var toDelete = jQuery(this).attr("data-delete");
  var toDeleteName = jQuery(this).attr("data-name"); // console.log("clicked");
  //should add a are you sure popup

  deleteCampaign(toDeleteName, toDelete);
});
jQuery(".campaignList").on("click", ".saveNewCamp", function () {
  var newCampName = jQuery("input[name='newCamp']").val();
  var campObj = {
    "name": newCampName
  };
  thisCampaign = {
    "campaign": {
      "name": newCampName
    }
  };
  campaignObj.campaigns.push(campObj); // console.log(JSON.stringify(campaignObj))

  writeFile(campaignListPath, JSON.stringify(campaignObj)).then(function (data) {
    if (data == "File Written") {
      createCampaign(newCampName).then(function (data) {
        if (data == "done") {
          removeSpace(newCampName).then(function (data) {
            thisCampaignPath = campaignDirPath + data;
            writeFile(thisCampaignPath + "/camp.json", JSON.stringify(thisCampaign)).then(function () {
              jQuery(".campaigns").remove();
            });
          });
        } else {
          throw new Error(data);
        }
      });
    } else {
      throw new Error(data);
    }
  });
});

function deleteCampaign(toDeleteName, toDelete) {
  return new Promise(function (resolve, reject) {
    var newArray = campaignObj.campaigns; // console.log(newArray)
    // console.log("delet this number " + toDelete + " and this is the object" + JSON.stringify(campaignObj.campaigns));

    newArray.splice(toDelete, 1); // console.log(JSON.stringify(campaignObj));

    writeFile(campaignListPath, JSON.stringify(campaignObj)).then(function (data) {
      if (data == "File Written") {
        removeSpace(toDeleteName).then(function (data) {
          rimraf(campaignDirPath + data, function (stuff) {
            // console.log(stuff)
            getCampaigns(campaignListPath).then(function (data) {
              setCampaigns(data).then(function (campList) {
                jQuery(".campaignList").html(campList);
              });
            });
          });
        });
      }
    });
  });
}

function createCampaign(campName) {
  return new Promise(function (resolve, reject) {
    var dir;
    removeSpace(campName).then(function (data) {
      dir = campaignDirPath + data;
    });

    try {
      checkDirExist(dir).then(function (data) {
        if (data == "false") {
          createDir(dir).then(function (data) {
            resolve(data);
          });
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

function newCampaign() {
  getCampaigns(campaignListPath).then(function (data) {
    setCampaigns(data).then(function (html) {
      var addOnHtml = "<tr><td><input type='text' name='newCamp' /></td><td><button type='button' class='btn btn-primary saveNewCamp'>Save</button></td></tr></table>";
      var newHtml = html.replace("</table>", addOnHtml);
      jQuery(".campaignList").html(newHtml);
    });
  });
} //Gets the list of campaigns


function getCampaigns(path) {
  return new Promise(function (resolve, reject) {
    try {
      // console.log("getCampaigns " + path);
      checkFileExist(path).then(function (data) {
        // console.log(data);
        if (data == "true") {
          readAFile(path).then(function (campaigns) {
            campaigns = JSON.parse(campaigns);
            campaignObj = campaigns;
            resolve(campaignObj);
          });
        }
      });
    } catch (error) {
      reject(error);
    }
  });
} //Puts the list of campaigns on the campaign selector.


function setCampaigns(campaigns) {
  return new Promise(function (resolve, reject) {
    try {
      var campArray = campaigns.campaigns;
      var html = "<table>";
      campArray.forEach(function (node, i) {
        // console.log(JSON.stringify(node))
        // console.log(campaigns.campaigns[i].name)
        html += "<tr><td>" + campaigns.campaigns[i].name + "</td><td><button type='button' data-name='" + campaigns.campaigns[i].name + "' data-load='" + i + "' class='btn btn-primary campLoad'>Load</button><button type='button' data-name='" + campaigns.campaigns[i].name + "' data-delete='" + i + "' class='btn btn-primary campDelete'>Delete</button></td></tr>";
      });
      html += "</table>";
      resolve(html);
    } catch (error) {
      reject(error);
    }
  });
}
"use strict";

jQuery(".close").click(function () {
  jQuery(this).parent().toggle();
});
jQuery(".menu button").click(function () {
  var openMe = jQuery(this).attr("data-open");
  jQuery("." + openMe).toggle();
  clearTop();
  jQuery("." + openMe).addClass("onTop");
});
"use strict";
"use strict";

var profB = jQuery('#profBonus').val();
somethingClever();
jQuery('#profBonus').on("keyup", function () {
  profB = jQuery('#profBonus').val();
  somethingClever();
});

function somethingClever() {
  jQuery('.icon-prof').each(function () {
    var classes = ['icon-prof', 'icon-prof proficient', 'icon-prof expertise'];
    var currentClass = jQuery(this).attr('class');
    var currentPos = jQuery.inArray(currentClass, classes);
    var myProf = jQuery(this).parent().children('.profVal');
    updateProf(jQuery(myProf), currentPos);
  });
}

function updateProf(myProf, myProfSkillFlag) {
  var thisAbility = jQuery(myProf).attr('id');
  var thisAbilityBonusID = '#' + thisAbility + '-Bonus';
  var thisAbilityBonus = jQuery('.abilities ' + thisAbilityBonusID).text();
  var newVal = parseInt(thisAbilityBonus);

  if (myProfSkillFlag == 0) {
    var newVal = parseInt(thisAbilityBonus);
  }

  if (myProfSkillFlag == 1) {
    var newVal = parseInt(profB) + parseInt(thisAbilityBonus);
  }

  if (myProfSkillFlag == 2) {
    var newVal = parseInt(profB) * 2 + parseInt(thisAbilityBonus);
  }

  jQuery(myProf).text(newVal);
}

;
jQuery('.icon-prof').click(function () {
  var classes = ['icon-prof', 'icon-prof proficient', 'icon-prof expertise'];
  var currentClass = jQuery(this).attr('class');
  var currentPos = jQuery.inArray(currentClass, classes);
  var newPos = (currentPos + 1) % classes.length;
  var newClass = classes[newPos];
  jQuery(this).attr('class', newClass);
  var myProf = jQuery(this).parent().children('.profVal');
  updateProf(jQuery(myProf), newPos);
});
"use strict";

//themes
var buttonOptions = ['default', 'black', 'gray', 'light', 'red'];
jQuery(buttonOptions).each(function () {
  var myStyle = this;
  var myId = '#' + myStyle;
  jQuery(myId).on("click", function () {
    $("body").removeAttr('class');
    jQuery('body').addClass('theme-' + myStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxX2FwcC5qcyIsIjAyX3N0YXJ0dXAuanMiLCIwM19pby5qcyIsImFiaWxpdHlCb251cy5qcyIsImNsaWNrVG9Gcm9udC5qcyIsImxvYWRCb29rcy5qcyIsImxvYWRDYW1wYWlnbi5qcyIsIm1lbnVCdXR0b25zLmpzIiwibnBjLmpzIiwicHJvZmljaWVuY2llcy5qcyIsInRoZW1lcy5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJyaW1yYWYiLCJjYW1wYWlnbkxpc3RQYXRoIiwiYm9va1BhdGgiLCJjYW1wYWlnbkRpclBhdGgiLCJ0aGlzQ2FtcGFpZ25QYXRoIiwiYm9va3MiLCJucGMiLCJjYW1wYWlnbk9iaiIsInRoaXNDYW1wYWlnbiIsInNwYWNlQ2hhciIsImpRdWVyeSIsIm9uIiwicmVtb3ZlIiwicmVhZHkiLCJkcmFnZ2FibGUiLCJjb250YWlubWVudCIsInNjcm9sbCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicHJvcGVydHkiLCJ1bmRlZmluZWQiLCJkb2N1bWVudCIsInN0YXJ0QXBwIiwidGhlbiIsImRhdGEiLCJzZXRDYW1wYWlnbnMiLCJjYW1wTGlzdCIsInByZXBlbmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldENhbXBhaWducyIsImVycm9yIiwicmVhZEFGaWxlIiwiZmlsZXBhdGgiLCJyZWFkRmlsZSIsImVyciIsIm1lc3NhZ2UiLCJ3cml0ZUZpbGUiLCJnZXREaXJDb250ZW50cyIsImRpciIsImZpbGVzIiwiZmlsZU5hbWVzIiwicmVhZGRpclN5bmMiLCJmb3JFYWNoIiwiZmlsZU5hbWUiLCJwdXNoIiwiY2hlY2tGaWxlRXhpc3QiLCJwYXRoIiwiYWNjZXNzIiwiRl9PSyIsImNoZWNrRGlyRXhpc3QiLCJleGlzdHNTeW5jIiwiY3JlYXRlRGlyIiwibWtkaXJTeW5jIiwicmVtb3ZlU3BhY2UiLCJzdHJpbmciLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJhZGRTcGFjZSIsIlJlZ0V4cCIsInVwZGF0ZUFiaWxpdHlCb251cyIsIm15QWJpbGl0eSIsImFiaWxpdHkiLCJ2YWwiLCJtb2RpZmllciIsInBhcmVudCIsImNoaWxkcmVuIiwidGV4dCIsImlzTnVtZXJpYyIsIk1hdGgiLCJmbG9vciIsImVhY2giLCJzZWxlY3QiLCJ1cGRhdGVQcm9mIiwiYXR0ciIsImNsZWFyVG9wIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImxpc3RCb29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aXRsZUFycmF5IiwiaSIsImxlbmd0aCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm5hbWUiLCJib29rIiwiYm9va1RpdGxlIiwiYm9va09iaiIsImRldGFpbHMiLCJuZXdDYW1wYWlnbiIsInRvTG9hZCIsInRoaXNOYW1lIiwidGhpc0RpciIsImFsZXJ0IiwiZGVsZXRlQ2FtcGFpZ24iLCJ0b0RlbGV0ZSIsInRvRGVsZXRlTmFtZSIsIm5ld0NhbXBOYW1lIiwiY2FtcE9iaiIsImNhbXBhaWducyIsImNyZWF0ZUNhbXBhaWduIiwiRXJyb3IiLCJuZXdBcnJheSIsInNwbGljZSIsInN0dWZmIiwiaHRtbCIsImNhbXBOYW1lIiwiYWRkT25IdG1sIiwibmV3SHRtbCIsImNhbXBBcnJheSIsIm5vZGUiLCJjbGljayIsInRvZ2dsZSIsIm9wZW5NZSIsInByb2ZCIiwic29tZXRoaW5nQ2xldmVyIiwiY2xhc3NlcyIsImN1cnJlbnRDbGFzcyIsImN1cnJlbnRQb3MiLCJpbkFycmF5IiwibXlQcm9mIiwibXlQcm9mU2tpbGxGbGFnIiwidGhpc0FiaWxpdHkiLCJ0aGlzQWJpbGl0eUJvbnVzSUQiLCJ0aGlzQWJpbGl0eUJvbnVzIiwibmV3VmFsIiwicGFyc2VJbnQiLCJuZXdQb3MiLCJuZXdDbGFzcyIsImJ1dHRvbk9wdGlvbnMiLCJteVN0eWxlIiwibXlJZCIsIiQiLCJyZW1vdmVBdHRyIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0U7O0FBQ0EsSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFoQjs7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R0FBRyxJQUFkO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLE1BQU1ELE9BQWpCO0FBQ0E3SCxFQUFBQSxNQUFNLENBQUM4SCxJQUFELENBQU4sQ0FBYTdILEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsWUFBVztBQUNoQzhILElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUMsVUFBVixDQUFxQixPQUFyQjtBQUNBaEksSUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlcUUsUUFBZixDQUF3QixXQUFXd0QsT0FBbkM7QUFDSCxHQUhEO0FBSUgsQ0FQRCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbiAgLy8gcmVtb3ZlIGxpbmUgYmVsb3cgd2hlbiB0ZXN0aW5nIGZyb250ZW5kXHJcbiAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcclxuICB2YXIgcmltcmFmID0gcmVxdWlyZShcInJpbXJhZlwiKTtcclxuICBcclxuLy8gUGF0aHNcclxubGV0IGNhbXBhaWduTGlzdFBhdGggPSBcIi4vY2FtcGFpZ24uanNvblwiO1xyXG5sZXQgYm9va1BhdGggPSBcIi4vYm9va3MvXCI7XHJcbmxldCBjYW1wYWlnbkRpclBhdGggPSBcIi4vY2FtcGFpZ25zL1wiO1xyXG5sZXQgdGhpc0NhbXBhaWduUGF0aDtcclxuLy8vXHJcblxyXG4vL2dsb2RhbCBvYmplY3RzXHJcbnZhciBib29rcyA9IHt9O1xyXG52YXIgbnBjID0ge307XHJcbnZhciBjYW1wYWlnbk9iaiA9IHt9O1xyXG52YXIgdGhpc0NhbXBhaWduID0ge307XHJcbi8vL1xyXG5cclxuLy9nbG9iYWwgdmFyc1xyXG5sZXQgc3BhY2VDaGFyID0gXCJfX1wiO1xyXG4vLy9cclxuXHJcbi8vdGVtcCB0byBjb3NlIHRoZSBjYW1wYWlnbiBwaWNrZXIuXHJcbmpRdWVyeShcIi5jbG9zZUNhbXBXaW5kb3dcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpe1xyXG4gIGpRdWVyeShcIi5jYW1wYWlnbnNcIikucmVtb3ZlKCk7XHJcbn0pO1xyXG5cclxualF1ZXJ5KFwiZG9jdW1lbnRcIikucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gIGpRdWVyeShcIi5kcmFnXCIpLmRyYWdnYWJsZSh7XHJcbiAgICAgIGNvbnRhaW5tZW50OiBcIi5tYWluVmlld1wiLFxyXG4gICAgICBzY3JvbGw6IGZhbHNlXHJcbiAgfSk7XHJcblxyXG5cclxufSk7XHJcblxyXG5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5ID0gZnVuY3Rpb24ocHJvcGVydHkpIHtcclxucmV0dXJuIHRoaXNbcHJvcGVydHldICE9PSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5cclxuXHJcbiIsImpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuICBcclxuICBzdGFydEFwcCgpLnRoZW4oKGRhdGEpPT57XHJcbiAgICBzZXRDYW1wYWlnbnMoZGF0YSkudGhlbigoY2FtcExpc3QpPT57XHJcbiAgICAgIGpRdWVyeShcIi5jYW1wYWlnbkxpc3RcIikucHJlcGVuZChjYW1wTGlzdCk7XHJcbiAgICB9KVxyXG4gICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coY2FtcGFpZ25PYmopXHJcbiAgfSk7XHJcbiBcclxuICB9KVxyXG4gIFxyXG5cclxuICBmdW5jdGlvbiBzdGFydEFwcCgpe1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XHJcbiAgICAgIHRyeXtcclxuICAgICAgICBnZXRDYW1wYWlnbnMoY2FtcGFpZ25MaXN0UGF0aCkudGhlbigoZGF0YSk9PntcclxuICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKXtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgXHJcbiAgfSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmZ1bmN0aW9uIHJlYWRBRmlsZShmaWxlcGF0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBmcy5yZWFkRmlsZShmaWxlcGF0aCwgJ3V0Zi04JywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJBbiBlcnJvciBvY3VycmVkIHJlYWRpbmcgdGhlIGZpbGUgOlwiICsgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyaXRlRmlsZShmaWxlcGF0aCwgZGF0YSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBmcy53cml0ZUZpbGUoZmlsZXBhdGgsIGRhdGEsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKFwiRmlsZSBXcml0dGVuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXREaXJDb250ZW50cyhkaXIpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdmFyIGZpbGVzID0ge307XHJcbiAgICAgICAgdmFyIGZpbGVOYW1lcyA9IFtdO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZzLnJlYWRkaXJTeW5jKGRpcikuZm9yRWFjaCgoZmlsZU5hbWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogZmlsZU5hbWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBmaWxlcyA9IHsgXCJmaWxlc1wiOiBmaWxlTmFtZXMgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZmlsZXMpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrRmlsZUV4aXN0KHBhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKCFwYXRoKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChcIlBhdGggaXMgaW52YWxpZCBcIiArIHBhdGgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZzLmFjY2VzcyhwYXRoLCBmcy5GX09LLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcImZhbHNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcInRydWVcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChcImVycm9yXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0RpckV4aXN0KGRpcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhkaXIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoXCJmYWxzZVwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVEaXIoZGlyKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZzLm1rZGlyU3luYyhkaXIpO1xyXG4gICAgICAgICAgICByZXNvbHZlKFwiZG9uZVwiKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTcGFjZShzdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGNsZWFuU3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xccy9nLCBzcGFjZUNoYXIpO1xyXG4gICAgICAgICAgICByZXNvbHZlKGNsZWFuU3RyaW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU3BhY2Uoc3RyaW5nKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgYWRkU3BhY2UgPSBuZXcgUmVnRXhwKHNwYWNlQ2hhciwgXCJnXCIpXHJcbiAgICAgICAgICAgIHZhciBjbGVhblN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGFkZFNwYWNlLCAvXFxzLyk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoY2xlYW5TdHJpbmcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG4vL3dyaXRlIHRlc3RcclxuLy8gdmFyIHRlc3RPYmogID0gXCJUaGlzIGlzIGEgd3JpdGUgdGVzdFwiO1xyXG4vLyB3cml0ZUZpbGUoXCIuLi90ZXN0LnR4dFwiLCB0ZXN0T2JqKTtcclxuIiwiXHJcbmZ1bmN0aW9uIHVwZGF0ZUFiaWxpdHlCb251cyhteUFiaWxpdHkpIHtcclxuICAgIHZhciBhYmlsaXR5ID0galF1ZXJ5KG15QWJpbGl0eSkudmFsKCk7XHJcblxyXG4gICAgdmFyIG1vZGlmaWVyID0galF1ZXJ5KG15QWJpbGl0eSkucGFyZW50KCkuY2hpbGRyZW4oJy5tb2RpZmllci1idWJibGUnKS50ZXh0KCk7XHJcbiAgICBpZiAoIWpRdWVyeS5pc051bWVyaWMoYWJpbGl0eSkpIHtcclxuICAgICAgICBhYmlsaXR5ID0gMTtcclxuICAgICAgICBqUXVlcnkobXlBYmlsaXR5KS52YWwoYWJpbGl0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kaWZpZXIgPSBNYXRoLmZsb29yKChhYmlsaXR5IC0gMTApIC8gMik7XHJcbiAgICBqUXVlcnkobXlBYmlsaXR5KS5wYXJlbnQoKS5jaGlsZHJlbignLm1vZGlmaWVyLWJ1YmJsZScpLnRleHQobW9kaWZpZXIpO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeShcIi5hYmlsaXR5XCIpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICB1cGRhdGVBYmlsaXR5Qm9udXMoalF1ZXJ5KHRoaXMpKTtcclxuXHJcbiAgICBqUXVlcnkodGhpcykub24oXCJmb2N1c1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBqUXVlcnkodGhpcykuc2VsZWN0KCk7XHJcbiAgICB9KVxyXG4gICAgalF1ZXJ5KHRoaXMpLm9uKFwia2V5dXBcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdXBkYXRlQWJpbGl0eUJvbnVzKGpRdWVyeSh0aGlzKSk7XHJcbiAgICAgICAgdXBkYXRlUHJvZihqUXVlcnkoJy5zYXZpbmdUaHJvd3MgIycralF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykpKTtcclxuICAgIH0pO1xyXG59KTtcclxuIiwiZnVuY3Rpb24gY2xlYXJUb3AoKSB7XHJcbiAgICBqUXVlcnkoXCIuZHJhZ1wiKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcyhcIm9uVG9wXCIpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5qUXVlcnkoXCIuZHJhZ1wiKS5vbihcIm1vdXNlZG93blwiLCBmdW5jdGlvbigpIHtcclxuICAgIGNsZWFyVG9wKCk7XHJcbiAgICBqUXVlcnkodGhpcykuYWRkQ2xhc3MoXCJvblRvcFwiKTtcclxufSk7XHJcbiIsIi8vIGdldERpckNvbnRlbnRzKFwiLi9ib29rc1wiKS50aGVuKGZ1bmN0aW9uIChmaWxlcykge1xyXG4vLyAgIC8vIGNvbnNvbGUubG9nKCk7XHJcbi8vICAgLy8gY29uc29sZS5sb2coSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmaWxlcy5maWxlc1swXS5uYW1lKSkpO1xyXG4vLyAgIGZvcih2YXIgaSA9IDA7IGkgPD0gZmlsZXMuZmlsZXMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbi8vICAgICByZWFkQUZpbGUoXCIuL2Jvb2tzL1wiICsgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmaWxlcy5maWxlc1tpXS5uYW1lKSkpLnRoZW4oZnVuY3Rpb24gKGJvb2spIHtcclxuLy8gICAgICAgdmFyIGJvb2tUaXRsZSA9IEpTT04ucGFyc2UoYm9vayk7XHJcbi8vICAgICAgIGNvbnNvbGUubG9nKGJvb2tUaXRsZS5kZXRhaWxzLm5hbWUpO1xyXG4vLyAgICAgICBqUXVlcnkoXCIuYm9va0xpc3RcIikuYXBwZW5kKGA8ZGl2IGNsYXNzPVwiYm9va1wiPiR7Ym9va1RpdGxlLmRldGFpbHMubmFtZX08ZGl2PmApO1xyXG5cclxuLy8gICAgICAgIC8vbG9vayBmb3IgbnBjLCB0aGlzIHdpbGwgZXZlbnR1YWxseSBiZSBpdHMgb3duIGZ1bmN0aW9uXHJcbi8vICAgICAgIGlmKGJvb2tUaXRsZS5oYXNPd25Qcm9wZXJ0eShcIk5QQ1wiKSl7XHJcbi8vICAgICAgICAgY29uc29sZS5sb2coYm9va1RpdGxlLmRldGFpbHMubmFtZStcIiB0cnVlXCIpXHJcbi8vICAgICAgIH1lbHNle1xyXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKFwibm9uZSBmb3VuZFwiKVxyXG4vLyAgICAgICB9XHJcblxyXG4vLyAgICAgfSk7XHJcblxyXG5cclxuXHJcbi8vICAgfVxyXG4vLyB9KTtcclxubGlzdEJvb2tzKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZGF0YSlcclxufSk7XHJcbmZ1bmN0aW9uIGxpc3RCb29rcygpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgbGV0IHRpdGxlQXJyYXkgPVtdXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZ2V0RGlyQ29udGVudHMoYm9va1BhdGgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGRhdGEuZmlsZXMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBib29rUGF0aCArIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YS5maWxlc1tpXS5uYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICByZWFkQUZpbGUocGF0aCkudGhlbihmdW5jdGlvbiAoYm9vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9va1RpdGxlID0gSlNPTi5wYXJzZShib29rKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvb2tPYmogPSB7XCJuYW1lXCI6Ym9va1RpdGxlLmRldGFpbHMubmFtZSwgXCJwYXRoXCI6cGF0aH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVBcnJheS5wdXNoKEpTT04uc3RyaW5naWZ5KGJvb2tPYmopKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShib29rVGl0bGUuZGV0YWlscy5uYW1lKSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGl0bGVBcnJheSlcclxuICAgICAgICAgICAgICAgIGJvb2tzID0ge1wiYm9va3NcIjp0aXRsZUFycmF5fTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYm9va3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiLyoqXHJcbiAqIE5lZWQgdG8gYnVpbGQgbG9hZGluZyBhIGNhbXBhaWduXHJcbiAqIG5lZWQgbmV3IGNhbXBhaWduIHRvIG1ha2Ugc3VyZSBpdHMgbmFtZSBpcyB1bmlxdWUuXHJcbiAqL1xyXG5cclxuXHJcbmpRdWVyeShcIi5jYW1wQWRkXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgbmV3Q2FtcGFpZ24oKTtcclxufSk7XHJcblxyXG5qUXVlcnkoXCIuY2FtcGFpZ25MaXN0XCIpLm9uKFwiY2xpY2tcIiwgXCIuY2FtcExvYWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRvTG9hZCA9IGpRdWVyeSh0aGlzKS5hdHRyKFwiZGF0YS1sb2FkXCIpO1xyXG4gICAgdmFyIHRoaXNOYW1lID0galF1ZXJ5KHRoaXMpLmF0dHIoXCJkYXRhLW5hbWVcIik7XHJcbiAgICB2YXIgdGhpc0RpcjtcclxuICAgIC8vICAgY29uc29sZS5sb2codG9Mb2FkTmFtZSlcclxuICAgIHJlbW92ZVNwYWNlKHRoaXNOYW1lKS50aGVuKChuYW1lKSA9PiB7XHJcbiAgICAgICAgdGhpc0RpciA9IGNhbXBhaWduRGlyUGF0aCArIG5hbWUgKyBcIi9jYW1wLmpzb25cIjtcclxuICAgICAgICBjaGVja0ZpbGVFeGlzdCh0aGlzRGlyKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhID09IFwiZmFsc2VcIikge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJUaGlzIGNhbXBhaWduIGRvZXNuJ3QgZXhpc3QuLi4gTm93IGRlbGV0aW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlQ2FtcGFpZ24odGhpc05hbWUsIHRvTG9hZClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlYWRBRmlsZSh0aGlzRGlyKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc0NhbXBhaWduID09IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vV2lsbCBuZWVkIHRvIGxvYWQgdXAgYWxsIHRoZSBib29rcyBhbmQgc3R1ZmYsIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vYnV0IHdlIG5lZWQgdG8gZmlndXJlIG91dCB0aGUgb2JqXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gZm9yIG5vdyB3ZSB3aWxsIGp1c3QgZ28gdG8gdGhlIHVpXHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiLmNhbXBhaWduc1wiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgIH0pXHJcbn0pXHJcblxyXG4vL3RoZSBkZWxldGUgYnV0dG9uXHJcbmpRdWVyeShcIi5jYW1wYWlnbkxpc3RcIikub24oXCJjbGlja1wiLCBcIi5jYW1wRGVsZXRlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0b0RlbGV0ZSA9IGpRdWVyeSh0aGlzKS5hdHRyKFwiZGF0YS1kZWxldGVcIik7XHJcbiAgICB2YXIgdG9EZWxldGVOYW1lID0galF1ZXJ5KHRoaXMpLmF0dHIoXCJkYXRhLW5hbWVcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNsaWNrZWRcIik7XHJcbiAgICAvL3Nob3VsZCBhZGQgYSBhcmUgeW91IHN1cmUgcG9wdXBcclxuICAgIGRlbGV0ZUNhbXBhaWduKHRvRGVsZXRlTmFtZSwgdG9EZWxldGUpXHJcbn0pO1xyXG5cclxualF1ZXJ5KFwiLmNhbXBhaWduTGlzdFwiKS5vbihcImNsaWNrXCIsIFwiLnNhdmVOZXdDYW1wXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBuZXdDYW1wTmFtZSA9IGpRdWVyeShcImlucHV0W25hbWU9J25ld0NhbXAnXVwiKS52YWwoKTtcclxuICAgIHZhciBjYW1wT2JqID0ge1xyXG4gICAgICAgIFwibmFtZVwiOiBuZXdDYW1wTmFtZVxyXG4gICAgfTtcclxuICAgIHRoaXNDYW1wYWlnbiA9IHtcclxuICAgICAgICBcImNhbXBhaWduXCI6IHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IG5ld0NhbXBOYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2FtcGFpZ25PYmouY2FtcGFpZ25zLnB1c2goY2FtcE9iaik7IC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGNhbXBhaWduT2JqKSlcclxuXHJcbiAgICB3cml0ZUZpbGUoY2FtcGFpZ25MaXN0UGF0aCwgSlNPTi5zdHJpbmdpZnkoY2FtcGFpZ25PYmopKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gXCJGaWxlIFdyaXR0ZW5cIikge1xyXG4gICAgICAgICAgICBjcmVhdGVDYW1wYWlnbihuZXdDYW1wTmFtZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT0gXCJkb25lXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVTcGFjZShuZXdDYW1wTmFtZSkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQ2FtcGFpZ25QYXRoID0gY2FtcGFpZ25EaXJQYXRoICsgZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKHRoaXNDYW1wYWlnblBhdGggKyBcIi9jYW1wLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkodGhpc0NhbXBhaWduKSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoXCIuY2FtcGFpZ25zXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gZGVsZXRlQ2FtcGFpZ24odG9EZWxldGVOYW1lLCB0b0RlbGV0ZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB2YXIgbmV3QXJyYXkgPSBjYW1wYWlnbk9iai5jYW1wYWlnbnM7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobmV3QXJyYXkpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJkZWxldCB0aGlzIG51bWJlciBcIiArIHRvRGVsZXRlICsgXCIgYW5kIHRoaXMgaXMgdGhlIG9iamVjdFwiICsgSlNPTi5zdHJpbmdpZnkoY2FtcGFpZ25PYmouY2FtcGFpZ25zKSk7XHJcbiAgICAgICAgbmV3QXJyYXkuc3BsaWNlKHRvRGVsZXRlLCAxKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShjYW1wYWlnbk9iaikpO1xyXG4gICAgICAgIHdyaXRlRmlsZShjYW1wYWlnbkxpc3RQYXRoLCBKU09OLnN0cmluZ2lmeShjYW1wYWlnbk9iaikpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEgPT0gXCJGaWxlIFdyaXR0ZW5cIikge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlU3BhY2UodG9EZWxldGVOYW1lKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmltcmFmKGNhbXBhaWduRGlyUGF0aCArIGRhdGEsIChzdHVmZikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHVmZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q2FtcGFpZ25zKGNhbXBhaWduTGlzdFBhdGgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENhbXBhaWducyhkYXRhKS50aGVuKChjYW1wTGlzdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShcIi5jYW1wYWlnbkxpc3RcIikuaHRtbChjYW1wTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhbXBhaWduKGNhbXBOYW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHZhciBkaXI7XHJcbiAgICAgICAgcmVtb3ZlU3BhY2UoY2FtcE5hbWUpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgZGlyID0gY2FtcGFpZ25EaXJQYXRoICsgZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjaGVja0RpckV4aXN0KGRpcikudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRGlyKGRpcikudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZXdDYW1wYWlnbigpIHtcclxuICAgIGdldENhbXBhaWducyhjYW1wYWlnbkxpc3RQYXRoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgc2V0Q2FtcGFpZ25zKGRhdGEpLnRoZW4oKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgdmFyIGFkZE9uSHRtbCA9IFwiPHRyPjx0ZD48aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0nbmV3Q2FtcCcgLz48L3RkPjx0ZD48YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J2J0biBidG4tcHJpbWFyeSBzYXZlTmV3Q2FtcCc+U2F2ZTwvYnV0dG9uPjwvdGQ+PC90cj48L3RhYmxlPlwiO1xyXG4gICAgICAgICAgICB2YXIgbmV3SHRtbCA9IGh0bWwucmVwbGFjZShcIjwvdGFibGU+XCIsIGFkZE9uSHRtbCk7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5jYW1wYWlnbkxpc3RcIikuaHRtbChuZXdIdG1sKTtcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuXHJcbn1cclxuXHJcbi8vR2V0cyB0aGUgbGlzdCBvZiBjYW1wYWlnbnNcclxuZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zKHBhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJnZXRDYW1wYWlnbnMgXCIgKyBwYXRoKTtcclxuICAgICAgICAgICAgY2hlY2tGaWxlRXhpc3QocGF0aCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRBRmlsZShwYXRoKS50aGVuKChjYW1wYWlnbnMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ25zID0gSlNPTi5wYXJzZShjYW1wYWlnbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1wYWlnbk9iaiA9IGNhbXBhaWducztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjYW1wYWlnbk9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuLy9QdXRzIHRoZSBsaXN0IG9mIGNhbXBhaWducyBvbiB0aGUgY2FtcGFpZ24gc2VsZWN0b3IuXHJcbmZ1bmN0aW9uIHNldENhbXBhaWducyhjYW1wYWlnbnMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGNhbXBBcnJheSA9IGNhbXBhaWducy5jYW1wYWlnbnM7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gXCI8dGFibGU+XCI7XHJcbiAgICAgICAgICAgIGNhbXBBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShub2RlKSlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNhbXBhaWducy5jYW1wYWlnbnNbaV0ubmFtZSlcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRkPlwiICsgY2FtcGFpZ25zLmNhbXBhaWduc1tpXS5uYW1lICsgXCI8L3RkPjx0ZD48YnV0dG9uIHR5cGU9J2J1dHRvbicgZGF0YS1uYW1lPSdcIiArIGNhbXBhaWducy5jYW1wYWlnbnNbaV0ubmFtZSArIFwiJyBkYXRhLWxvYWQ9J1wiICsgaSArIFwiJyBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5IGNhbXBMb2FkJz5Mb2FkPC9idXR0b24+PGJ1dHRvbiB0eXBlPSdidXR0b24nIGRhdGEtbmFtZT0nXCIgKyBjYW1wYWlnbnMuY2FtcGFpZ25zW2ldLm5hbWUgKyBcIicgZGF0YS1kZWxldGU9J1wiICsgaSArIFwiJyBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5IGNhbXBEZWxldGUnPkRlbGV0ZTwvYnV0dG9uPjwvdGQ+PC90cj5cIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaHRtbCArPSBcIjwvdGFibGU+XCI7XHJcblxyXG4gICAgICAgICAgICByZXNvbHZlKGh0bWwpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0iLCJqUXVlcnkoXCIuY2xvc2VcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgalF1ZXJ5KHRoaXMpLnBhcmVudCgpLnRvZ2dsZSgpO1xyXG59KVxyXG5qUXVlcnkoXCIubWVudSBidXR0b25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG9wZW5NZSA9IGpRdWVyeSh0aGlzKS5hdHRyKFwiZGF0YS1vcGVuXCIpO1xyXG4gICAgalF1ZXJ5KFwiLlwiICsgb3Blbk1lKS50b2dnbGUoKTtcclxuICAgIGNsZWFyVG9wKCk7XHJcbiAgICBqUXVlcnkoXCIuXCIgKyBvcGVuTWUpLmFkZENsYXNzKFwib25Ub3BcIik7XHJcbn0pOyIsIiIsInZhciBwcm9mQiA9IGpRdWVyeSgnI3Byb2ZCb251cycpLnZhbCgpO1xyXG5zb21ldGhpbmdDbGV2ZXIoKTtcclxuXHJcbmpRdWVyeSgnI3Byb2ZCb251cycpLm9uKFwia2V5dXBcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBwcm9mQiA9IGpRdWVyeSgnI3Byb2ZCb251cycpLnZhbCgpO1xyXG4gICAgc29tZXRoaW5nQ2xldmVyKCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc29tZXRoaW5nQ2xldmVyKCkge1xyXG4gICAgalF1ZXJ5KCcuaWNvbi1wcm9mJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY2xhc3NlcyA9IFsnaWNvbi1wcm9mJywgJ2ljb24tcHJvZiBwcm9maWNpZW50JywgJ2ljb24tcHJvZiBleHBlcnRpc2UnXTtcclxuICAgICAgICB2YXIgY3VycmVudENsYXNzID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2NsYXNzJyk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSBqUXVlcnkuaW5BcnJheShjdXJyZW50Q2xhc3MsIGNsYXNzZXMpO1xyXG4gICAgICAgIHZhciBteVByb2YgPSBqUXVlcnkodGhpcykucGFyZW50KCkuY2hpbGRyZW4oJy5wcm9mVmFsJyk7XHJcbiAgICAgICAgdXBkYXRlUHJvZihqUXVlcnkobXlQcm9mKSwgY3VycmVudFBvcyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUHJvZihteVByb2YsIG15UHJvZlNraWxsRmxhZykge1xyXG4gICAgdmFyIHRoaXNBYmlsaXR5ID0galF1ZXJ5KG15UHJvZikuYXR0cignaWQnKTtcclxuICAgIHZhciB0aGlzQWJpbGl0eUJvbnVzSUQgPSAnIycgKyB0aGlzQWJpbGl0eSArICctQm9udXMnO1xyXG4gICAgdmFyIHRoaXNBYmlsaXR5Qm9udXMgPSBqUXVlcnkoJy5hYmlsaXRpZXMgJyArIHRoaXNBYmlsaXR5Qm9udXNJRCkudGV4dCgpO1xyXG4gICAgdmFyIG5ld1ZhbCA9IHBhcnNlSW50KHRoaXNBYmlsaXR5Qm9udXMpO1xyXG4gICAgaWYgKG15UHJvZlNraWxsRmxhZyA9PSAwKSB7XHJcbiAgICAgICAgdmFyIG5ld1ZhbCA9IHBhcnNlSW50KHRoaXNBYmlsaXR5Qm9udXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKG15UHJvZlNraWxsRmxhZyA9PSAxKSB7XHJcbiAgICAgICAgdmFyIG5ld1ZhbCA9IHBhcnNlSW50KHByb2ZCKSArIHBhcnNlSW50KHRoaXNBYmlsaXR5Qm9udXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKG15UHJvZlNraWxsRmxhZyA9PSAyKSB7XHJcbiAgICAgICAgdmFyIG5ld1ZhbCA9IHBhcnNlSW50KHByb2ZCKSAqIDIgKyAocGFyc2VJbnQodGhpc0FiaWxpdHlCb251cykpO1xyXG4gICAgfVxyXG4gICAgalF1ZXJ5KG15UHJvZikudGV4dChuZXdWYWwpO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeSgnLmljb24tcHJvZicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGNsYXNzZXMgPSBbJ2ljb24tcHJvZicsICdpY29uLXByb2YgcHJvZmljaWVudCcsICdpY29uLXByb2YgZXhwZXJ0aXNlJ107XHJcbiAgICB2YXIgY3VycmVudENsYXNzID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2NsYXNzJyk7XHJcbiAgICB2YXIgY3VycmVudFBvcyA9IGpRdWVyeS5pbkFycmF5KGN1cnJlbnRDbGFzcywgY2xhc3Nlcyk7XHJcbiAgICB2YXIgbmV3UG9zID0gKChjdXJyZW50UG9zICsgMSkgJSBjbGFzc2VzLmxlbmd0aCk7XHJcbiAgICB2YXIgbmV3Q2xhc3MgPSBjbGFzc2VzW25ld1Bvc107XHJcbiAgICBqUXVlcnkodGhpcykuYXR0cignY2xhc3MnLCBuZXdDbGFzcyk7XHJcbiAgICB2YXIgbXlQcm9mID0galF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCcucHJvZlZhbCcpO1xyXG4gICAgdXBkYXRlUHJvZihqUXVlcnkobXlQcm9mKSwgbmV3UG9zKTtcclxufSk7XHJcbiIsIi8vdGhlbWVzXHJcbnZhciBidXR0b25PcHRpb25zID0gWydkZWZhdWx0JywgJ2JsYWNrJywgJ2dyYXknLCAnbGlnaHQnLCAncmVkJ107XHJcbmpRdWVyeShidXR0b25PcHRpb25zKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG15U3R5bGUgPSB0aGlzO1xyXG4gICAgdmFyIG15SWQgPSAnIycgKyBteVN0eWxlO1xyXG4gICAgalF1ZXJ5KG15SWQpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQXR0cignY2xhc3MnKTtcclxuICAgICAgICBqUXVlcnkoJ2JvZHknKS5hZGRDbGFzcygndGhlbWUtJyArIG15U3R5bGUpO1xyXG4gICAgfSlcclxufSlcclxuIl19
